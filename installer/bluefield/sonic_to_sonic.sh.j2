#!/bin/bash
#
# Copyright (c) 2021 NVIDIA CORPORATION & AFFILIATES.
# Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This script is run on the Bluefield already running SONiC, when sonic-sonic installer is used

set -e

# NOTE: Replace these flag at build time
IMAGE_VERSION="{{IMAGE_VERSION}}"
INSTALLER_PAYLOAD="{{ONIE_INSTALLER_PAYLOAD}}"
FILESYSTEM_DOCKERFS="{{FILESYSTEM_DOCKERFS}}"
DOCKERFS_DIR="{{DOCKERFS_DIR}}"
FILESYSTEM_SQUASHFS="{{FILESYSTEM_SQUASHFS}}"
KERNEL_VERSION="{{KERNEL_VERSION}}"
BF2_GRUB_CFG="{{BF2_GRUB_CFG}}"
BF3_GRUB_CFG="{{BF3_GRUB_CFG}}"

image_version="{{IMAGE_VERSION}}"
image_dir=image-$IMAGE_VERSION
demo_volume_revision_label=SONiC-OS-$IMAGE_VERSION

cd $(dirname $0)
if [ -r ./machine.conf ]; then
    . ./machine.conf
fi

echo "SONiC-SONiC Installer: platform: $platform"

# Make sure run as root or under 'sudo'
if [ $(id -u) -ne 0 ]
    then echo "Please run as root"
    exit 1
fi

if (lspci -n -d 15b3: | grep -wq 'a2dc'); then
	module=BF3
else
	module=BF2
fi

active_partition=$(findmnt -n -o SOURCE /host)
if [[ $active_partition == "" ]]; then
    echo "Failed to get active partition!"
    exit 1
fi

if [ -r /etc/machine.conf ]; then
    . /etc/machine.conf
elif [ -r /host/machine.conf ]; then
    . /host/machine.conf
fi

# Get platform specific linux kernel command line arguments
ONIE_PLATFORM_EXTRA_CMDLINE_LINUX=""

# Default var/log device size in MB
VAR_LOG_SIZE=4096

demo_mnt="/host"
# Get current SONiC image (grub/aboot/uboot)
eval running_sonic_revision="$(cat /proc/cmdline | sed -n 's/^.*loop=\/*image-\(\S\+\)\/.*$/\1/p')"
# Verify SONiC image exists
if [ ! -d "$demo_mnt/image-$running_sonic_revision" ]; then
    echo "ERROR: SONiC installation is corrupted: path $demo_mnt/image-$running_sonic_revision doesn't exist"
    exit 1
fi
# Prevent installing existing SONiC if it is running
if [ "$image_dir" = "image-$running_sonic_revision" ]; then
    echo "Not installing SONiC version $running_sonic_revision, as current running SONiC has the same version"
    exit 0
fi
# Remove extra SONiC images if any
for f in $demo_mnt/image-* ; do
    if [ -d $f ] && [ "$f" != "$demo_mnt/image-$running_sonic_revision" ] && [ "$f" != "$demo_mnt/$image_dir" ]; then
        echo "Removing old SONiC installation $f"
        rm -rf $f
    fi
done

# Create target directory or clean it up if exists
if [ -d $demo_mnt/$image_dir ]; then
    echo "Directory $demo_mnt/$image_dir/ already exists. Cleaning up..."
    rm -rf $demo_mnt/$image_dir/*
else
    mkdir $demo_mnt/$image_dir || {
        echo "Error: Unable to create SONiC directory"
        exit 1
    }
fi

# Decompress the file for the file system directly to the partition
if [ x"$docker_inram" = x"on" ]; then
    # when disk is small, keep dockerfs.tar.gz in disk, expand it into ramfs during initrd
    unzip -o $INSTALLER_PAYLOAD -x "platform.tar.gz" -d $demo_mnt/$image_dir
else
    unzip -o $INSTALLER_PAYLOAD -x "$FILESYSTEM_DOCKERFS" "platform.tar.gz" -d $demo_mnt/$image_dir

    TAR_EXTRA_OPTION="--numeric-owner --warning=no-timestamp"
    mkdir -p $demo_mnt/$image_dir/$DOCKERFS_DIR
    unzip -op $INSTALLER_PAYLOAD "$FILESYSTEM_DOCKERFS" | tar xz $TAR_EXTRA_OPTION -f - -C $demo_mnt/$image_dir/$DOCKERFS_DIR
fi

mkdir -p $demo_mnt/$image_dir/platform
unzip -op $INSTALLER_PAYLOAD "platform.tar.gz" | tar xz $TAR_EXTRA_OPTION -f - -C $demo_mnt/$image_dir/platform

# Edit the grub parameters
demo_grub_entry="$demo_volume_revision_label"

old_sonic_menuentry=$(cat /host/grub/grub.cfg | sed "/$running_sonic_revision/,/}/!d")

# Find the grub_cfg_root
partition=$active_partition
uuid=$(blkid ${partition} | sed -ne 's/.* UUID=\"\([^"]*\)\".*/\1/p')
if [ -z "$uuid" ]; then
	grub_cfg_root=${partition}
else
	grub_cfg_root=UUID=$uuid
fi

grub_cfg=$(mktemp)

if [[ $module == "BF3" ]]; then
    DEFAULT_GRUB_CMDLINE_LINUX=$BF3_GRUB_CFG
else
    DEFAULT_GRUB_CMDLINE_LINUX=$BF2_GRUB_CFG
fi

GRUB_CMDLINE_LINUX=${GRUB_CMDLINE_LINUX:-"$DEFAULT_GRUB_CMDLINE_LINUX"}
export GRUB_CMDLINE_LINUX

# Add the next-boot entry
# Place the common GRUB_CFG at build time
cat <<EOF >> $grub_cfg
{{GRUB_CFG}}
EOF

cat <<EOF >> $grub_cfg
$old_sonic_menuentry
EOF

cp $grub_cfg $demo_mnt/grub/grub.cfg

cd /

echo "Installed SONiC base image $demo_volume_label successfully"
