From 0104413e893f3e2d41da101b6788aea240e5a21a Mon Sep 17 00:00:00 2001
From: Donald Sharp <sharpd@nvidia.com>
Date: Thu, 15 Dec 2022 10:52:38 -0500
Subject: [PATCH 8/8] zebra: Fix code because missing backport

The commit:
commit 07fd1f7e9420efd480e85a9ab72b88fff274f791
Author: Donald Sharp <sharpd@nvidia.com>
Date:   Tue Aug 9 20:07:09 2022 -0400

    zebra: use rib_add_multipath in rt_netlink.c

    The new route code path was using a combination of
    both rib_add() and rib_add_multipath() let's clean
    it up some to use rib_add_multipath()

    Signed-off-by: Donald Sharp <sharpd@nvidia.com>

Abstracted the calling of rib_add and rib_add_multipath in
netlink_route_change_read_unicast to just calling rib_add_multipath
one time.  Since this commit was not backported the netlink_route_change_read_unicast
function had an additional rib_add that is not going through the new dplane
code to make a decision point about how to send up the message.

Make it so the non multipath case uses the new decision point.

Signed-off-by: Donald Sharp <sharpd@nvidia.com>
---
 zebra/rt_netlink.c | 41 ++++++++++++++++++++++++-----------------
 1 file changed, 24 insertions(+), 17 deletions(-)

diff --git a/zebra/rt_netlink.c b/zebra/rt_netlink.c
index b2df2cd8a..76402561e 100644
--- a/zebra/rt_netlink.c
+++ b/zebra/rt_netlink.c
@@ -909,37 +909,44 @@ int netlink_route_change_read_unicast_internal(struct nlmsghdr *h,
 		afi = AFI_IP6;
 
 	if (h->nlmsg_type == RTM_NEWROUTE) {
+		struct route_entry *re;
+		struct nexthop_group *ng = NULL;
+
+		re = XCALLOC(MTYPE_RE, sizeof(struct route_entry));
+		re->type = proto;
+		re->distance = distance;
+		re->flags = flags;
+		re->metric = metric;
+		re->mtu = mtu;
+		re->vrf_id = vrf_id;
+		re->table = table;
+		re->uptime = monotime(NULL);
+		re->tag = tag;
+		re->nhe_id = nhe_id;
+
+		if (!nhe_id)
+			ng = nexthop_group_new();
 
 		if (!tb[RTA_MULTIPATH]) {
-			struct nexthop nh = {0};
+			struct nexthop *nexthop, nh = {0};
 
 			if (!nhe_id) {
 				nh = parse_nexthop_unicast(
 					ns_id, rtm, tb, bh_type, index, prefsrc,
 					gate, afi, vrf_id);
+
+				nexthop = nexthop_new();
+				*nexthop = nh;
+				nexthop_group_add_sorted(ng, nexthop);
 			}
-			rib_add(afi, SAFI_UNICAST, vrf_id, proto, 0, flags, &p,
-				&src_p, &nh, nhe_id, table, metric, mtu,
-				distance, tag);
+			dplane_rib_add_multipath(afi, SAFI_UNICAST, &p, &src_p,
+						 re, ng, startup, ctx);
 		} else {
 			/* This is a multipath route */
-			struct route_entry *re;
 			struct nexthop_group *ng = NULL;
 			struct rtnexthop *rtnh =
 				(struct rtnexthop *)RTA_DATA(tb[RTA_MULTIPATH]);
 
-			re = XCALLOC(MTYPE_RE, sizeof(struct route_entry));
-			re->type = proto;
-			re->distance = distance;
-			re->flags = flags;
-			re->metric = metric;
-			re->mtu = mtu;
-			re->vrf_id = vrf_id;
-			re->table = table;
-			re->uptime = monotime(NULL);
-			re->tag = tag;
-			re->nhe_id = nhe_id;
-
 			if (!nhe_id) {
 				uint8_t nhop_num;
 
-- 
2.30.2

