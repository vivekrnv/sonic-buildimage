#!/usr/bin/python3

import sys
import time

from nexthop import fpga_lib, pcie_lib
from sonic_py_common import logger

REBOOT_DELAY_MS = 1000
REBOOT_ENABLE = 0xdeadbeef
SWITCHCARD_REBOOT_REG_OFFSET = 0x4
CPU_REBOOT_REG_OFFSET = 0x8

sonic_logger = logger.Logger("platform_reboot")
sonic_logger.set_min_log_priority_info()

def log_error(msg: str):
    sonic_logger.log_error(msg)

def main():
    switchcard_fpga_bdf = pcie_lib.get_switchcard_fpga_bdf()
    try:
        sonic_logger.log_info("Writing to power cycle control register to initiate reboot")
        fpga_lib.write_32(
            switchcard_fpga_bdf,
            SWITCHCARD_REBOOT_REG_OFFSET,
            REBOOT_ENABLE,
        )
    except Exception as e:
        log_error(
            "Error writing to power cycle control register on switchcard FPGA"
            f" {switchcard_fpga_bdf}: {str(e)}, trying CPU FPGA"
        )
    time.sleep(REBOOT_DELAY_MS / 1000)

    cpu_card_fpga_bdf = pcie_lib.get_cpu_card_fpga_bdf()
    try:
        fpga_lib.write_32(
            cpu_card_fpga_bdf,
            CPU_REBOOT_REG_OFFSET,
            REBOOT_ENABLE
        )
    except Exception as e:
        log_error(
            "Error writing to power cycle control register on CPU FPGA"
            f" {cpu_card_fpga_bdf}: {str(e)}"
        )
        return 2
    time.sleep(REBOOT_DELAY_MS / 1000)

    # If we reach here, we silently failed to reboot the dataplane!
    log_error(
        "Failed to initiate reboot, the control plane will reboot and"
        " leave the dataplane in an undefined state"
    )
    return 1

if __name__ == "__main__":
    # Systemd calls this script with one of 4 arguments. "poweroff" and "halt" we don't expect.
    # A cold reboot will pass "reboot". In the first 3 cases, we continue with the powercycle.
    # Warm reboots will use kexec and will pass "kexec" as the first argument, therefore we
    # must skip the powercycle in that case.
    if len(sys.argv) > 1 and sys.argv[1] == "kexec":
        sys.exit(0)
    sys.exit(main())
