####### Pensando ########

#!/bin/sh

R=""
export LD_LIBRARY_PATH=/platform/lib:/nic/lib:$LD_LIBRARY_PATH
export PATH=/platform/bin:/nic/bin:/platform/tools:/nic/tools:$PATH

boot0=
running_cpld_id=
root_mnt=$R/mnt
bl_conf_path=$root_mnt
HOST=/host
image_dir=image-$image_version
BL_CONF=boot-$image_dir.conf
ROOT_PARTUUID=C7F48DD2-C265-404B-959D-C64D21D49168

# Sonic kernel version
KVER=6.1.0-29-2-arm64

exec 0< /dev/tty 1> /dev/tty 2> /dev/tty

PKG=""
ACTION=""

root_pn=0

set -e

fatal()
{
    echo "FATAL: $1" >&2
    exit 1
}

check_running_cpld_id()
{
    if [ -z "$running_cpld_id" ]; then
        if [ "$install_env" = "onie" ]; then
            running_cpld_id=`printf "%d" \`chroot /mnt/a/rw/ /nic/bin/cpldapp -r 0x80\``
        else
	    running_cpld_id=`printf %d \`docker exec $(docker ps -q --filter ancestor="docker-dpu") cpldapp -r 0x80\``
        fi
    fi
}

check_existing_parts()
{
    local nparts i partuuid

    check_running_cpld_id

    nparts=$(sgdisk -p /dev/mmcblk0 | grep '^[ ]*[1-9]' | wc -l)
    for i in $(seq $nparts); do
        partuuid=$(sgdisk -i $i /dev/mmcblk0 | awk '/Partition unique GUID/ { print $NF }')
        case "$partuuid" in
        $ROOT_PARTUUID) root_pn=$i; ;;
        esac
    done
}

docker_cleanup()
{
    # Remove stopped containers
    echo "Removing stopped containers..."
    docker container prune -f

    # Remove dangling images (untagged, <none>)
    echo "Removing dangling images..."
    docker image prune -f

    # Remove unused images (not used by any container)
    echo "Removing unused images..."
    docker image prune -a -f

    # Remove unused volumes (not attached to any container)
    echo "Removing unused volumes..."
    docker volume prune -f

    # Remove unused networks
    echo "Removing unused networks..."
    docker network prune -f
}

cleanup()
{
    echo "==> Cleaning up residual files"
    running_sonic_revision=`cat /etc/sonic/sonic_version.yml | grep build_version | awk -F \' '{print $2}'`
    config_files=$(find /host -type f -name "boot*.conf" | grep -iv "$running_sonic_revision\|$image_dir" )
    if [ -z $config_files ]; then
        echo "No config files to remove"
    else
        echo "config files to remove are: $config_files"
    fi
    
    for file in $config_files; do
        if [ -f "$file" ]; then
            echo "Removing file: $file"
            rm "$file"
        fi
    done

    faulty_image_dir=$(find /host -type d -name "image-*" | grep -iv "$running_sonic_revision\|$image_dir")
    if [ -z $faulty_image_dir ]; then
        echo "No faulty image directories to remove"
    else
        echo "Faulty image directories to remove are: $faulty_image_dir"
    fi

    for d in $faulty_image_dir; do
        if [ -d "$d" ]; then
            echo "Removing directory: $d"
            rm -rfd "$d"
        fi
    done

}

create_bootloader_conf()
{
    echo "==> Create bootloader config"

cat <<EOF >> $bl_conf_path/$BL_CONF
default main

label main
	kernel /$image_dir/boot/vmlinuz-$KVER
	initrd /$image_dir/boot/initrd.img-$KVER
	devicetree /$image_dir/boot/elba-asic-psci.dtb
	append softdog.soft_panic=1 FW_NAME=mainfwa root=/dev/mmcblk0p10 rw rootwait rootfstype=ext4 loopfstype=squashfs loop=/$image_dir/fs.squashfs isolcpus=1,2,3,5,6,7,9,10,11,13,14,15 nohz_full=1,2,3,5,6,7,9,10,11,13,14,15 rcu_nocbs=1,2,3,5,6,7,9,10,11,13,14,15 rcu_nocb_poll irqaffinity=0
}
EOF
}

create_bootloader_mtfuji_conf()
{
    echo "==> Create bootloader mtfuji config"

cat <<EOF >> $bl_conf_path/$BL_CONF
default main

label main
	kernel /$image_dir/boot/vmlinuz-$KVER
	initrd /$image_dir/boot/initrd.img-$KVER
	devicetree /$image_dir/boot/elba-asic-psci-mtfuji.dtb
	append softdog.soft_panic=1 FW_NAME=mainfwa root=/dev/mmcblk0p10 rw rootwait rootfstype=ext4 loopfstype=squashfs loop=/$image_dir/fs.squashfs isolcpus=1,2,3,5,6,7,9,10,11,13,14,15 nohz_full=1,2,3,5,6,7,9,10,11,13,14,15 rcu_nocbs=1,2,3,5,6,7,9,10,11,13,14,15 rcu_nocb_poll irqaffinity=0
}
EOF
}

create_bootloader_lipari_conf()
{
    echo "==> Create bootloader lipari config"

cat <<EOF >> $bl_conf_path/$BL_CONF
default main

label main
	kernel /$image_dir/boot/vmlinuz-$KVER
	initrd /$image_dir/boot/initrd.img-$KVER
	devicetree /$image_dir/boot/elba-asic-psci-lipari.dtb
	append softdog.soft_panic=1 FW_NAME=mainfwa root=/dev/mmcblk0p10 rw rootwait rootfstype=ext4 loopfstype=squashfs loop=/$image_dir/fs.squashfs isolcpus=1,2,3,5,6,7,9,10,11,13,14,15 nohz_full=1,2,3,5,6,7,9,10,11,13,14,15 rcu_nocbs=1,2,3,5,6,7,9,10,11,13,14,15 rcu_nocb_poll irqaffinity=0
}
EOF
}
set_boot_command()
{
    local pn

    echo "==> Setting u-boot environment for Debian Boot"
    pn=$(printf "%x" $root_pn)

    fw_setenv -f baudrate 115200
    fw_setenv -f bootcmd 'test -n "$boot_once" && setenv do_boot_once "$boot_once" && setenv boot_once && saveenv && run do_boot_once; run boot_next'
    fw_setenv -f bootdelay 0
    fw_setenv -f fdt_addr_r bb100000
    fw_setenv -f kernel_addr_r a0000000
    fw_setenv -f kernel_comp_addr_r 88000000
    fw_setenv -f kernel_comp_size 8000000
    fw_setenv -f ramdisk_addr_r a4000000
}

set_sonic_env() {
    echo "current env is $env"
    BL_CONF_OLD=NONE
    pn=$(printf "%x" $root_pn)
    if [ "$install_env" = "onie" ]; then
        echo "set sonic env onie"
        fw_setenv -f linuxargs "${extra_cmdline_linux}"
        fw_setenv -f sonic_image_1 "sysboot mmc 0:$pn any bf000000 /$BL_CONF"
        fw_setenv -f sonic_image_2 "NONE"
        fw_setenv -f sonic_dir_1 $image_dir
        fw_setenv -f sonic_dir_2 "NONE"
        fw_setenv -f sonic_version_1 `echo $image_dir | sed "s/^image-/SONiC-OS-/g"`
        fw_setenv -f sonic_version_2 "NONE"

        fw_setenv -f boot_next "run sonic_image_1"
    else
        check_existing_parts
        pn=$(printf "%x" $root_pn)
        running_sonic_revision=`cat /etc/sonic/sonic_version.yml | grep build_version | awk -F \' '{print $2}'`
        SONIC_IMAGE_MAX=2
        idx=0
        for i in $(seq 1 $SONIC_IMAGE_MAX); do
            if [ "`fw_printenv sonic_version_$i 2>/dev/null | awk -F = '{print $2}'`" != "SONiC-OS-$running_sonic_revision" ]; then
                idx=$i
                break
            fi
        done

        fw_setenv linuxargs "${extra_cmdline_linux}"
        fw_setenv sonic_image_$idx "sysboot mmc 0:$pn any bf000000 /$BL_CONF"
        fw_setenv sonic_dir_$idx $image_dir
        fw_setenv sonic_version_$idx `echo $image_dir | sed "s/^image-/SONiC-OS-/g"`

        fw_setenv boot_next "run sonic_image_$idx"

    fi
}

cpldid_to_boot0_ver()
{
    case "$running_cpld_id" in
    130) boot0=19; ;;
    *)   boot0=0; ;;
    esac
}

install_boot0()
{
    boot0=0
    BOOT0_MAGIC=0x30f29e8b

    if [ "$install_env" = "onie" ]; then
        magic=`dd if=/dev/mtd2 bs=16 count=1 | od -H | head -1 | awk '{print $5}'`
        cur_ver=`dd if=/dev/mtd2 bs=16 skip=1 count=1 | od -H | head -1 | awk '{print $4}'`
    else
        magic=`dd if=/dev/mtd2 bs=16 count=1 status=none | od -t x4 | head -1 | awk '{print $5}'`
        cur_ver=`dd if=/dev/mtd2 bs=16 skip=1 count=1 status=none | od -t x4 | head -1 | awk '{print $4}'`
    fi

    cur_ver=0x$cur_ver
    magic=0x$magic
    cur_ver=$(printf "%d" "$cur_ver")

    cpldid_to_boot0_ver

    if [ $magic != $BOOT0_MAGIC -o $boot0 -le $cur_ver ]; then
        echo "Boot0 installation not needed"
        return
    fi

    if [ "$install_env" = "onie" ]; then
        image_path=$root_mnt
        prev_install_file_path=/$image_path/$image_dir/boot/install_file
        install_file_path=/$image_path/$image_dir/boot/onie_install_file
        sed 's/status=none//g' $prev_install_file_path > $install_file_path
    else
        image_path=$HOST
        install_file_path=/$image_path/$image_dir/boot/install_file
    fi

    if [ ! -e /$image_path/$image_dir/boot/boot0.img ]; then
        echo "boot0.img not present. Skipping boot0 installation"
        return
    fi

    echo "==> Installing boot0 image"
    chmod +x $install_file_path
    $install_file_path boot0 /$image_path/$image_dir/boot/boot0.img
}

install_uboota()
{
    if [ "$install_env" = "onie" ]; then
        image_path=$root_mnt
        prev_install_file_path=/$image_path/$image_dir/boot/install_file
        install_file_path=/$image_path/$image_dir/boot/onie_install_file
        sed 's/status=none//g' $prev_install_file_path > $install_file_path
    else
        image_path=$HOST
        install_file_path=/$image_path/$image_dir/boot/install_file
    fi

    chmod +x $install_file_path
    touch /$image_path/$image_dir/boot/first_boot
    echo "created /$image_path/$image_dir/boot/first_boot"

    if [ ! -e /$image_path/$image_dir/boot/uboota.img ]; then
        echo "uboota.img not present. Skipping uboota installation"
        return
    fi

    echo "==> Installing uboota image"
    $install_file_path uboota /$image_path/$image_dir/boot/uboota.img
}

########################################################################################################################

prepare_boot_menu() {
    echo "Sync up cache ..."
    sync
    echo "Setting up U-Boot environment..."
    if [ "$install_env" = "onie" ]; then
        bl_conf_path=$root_mnt
    else
        if [ -z "$running_cpld_id" ]; then
	    running_cpld_id=`printf %d \`docker exec $(docker ps -q --filter ancestor="docker-dpu") cpldapp -r 0x80\``
        fi
        bl_conf_path=$HOST
    fi
    file=$bl_conf_path/$BL_CONF
    if [ -f "$file" ]; then
        rm "$file"
    fi
    # Mt Fuji has qspi flash of 128MB
    if [ $running_cpld_id = "129" ]; then
        echo "Smart Switch - lipari"
        create_bootloader_lipari_conf
        install_uboota
        install_boot0
    elif [ $running_cpld_id = "130" ]; then
        echo "Smart Switch -  mtfuji"
        create_bootloader_mtfuji_conf
        install_uboota
        install_boot0
    else
        echo "Smart Nic"
        create_bootloader_conf
    fi
    MTD_UBOOTENV=$(cat /proc/mtd | grep -e 'ubootenv' | awk '{print $1}' | tr -dc '0-9')
    FW_ENV_DEFAULT="/dev/mtd$MTD_UBOOTENV 0x0 0x1000 0x10000"
    echo $FW_ENV_DEFAULT > /etc/fw_env.config
    set_boot_command
    set_sonic_env
}

create_partition() {
    check_running_cpld_id
    check_existing_parts

    echo "Formatting partition p$root_pn"
    mkfs.ext4 -F -q /dev/mmcblk0p$root_pn >/dev/null
}

mount_partition() {
    demo_mnt=$root_mnt
    mounted=$(mount | grep "/dev/mmcblk0p$root_pn on $demo_mnt type ext4" | wc -l)
    if [ $mounted -eq 0 ]; then
        mount /dev/mmcblk0p$root_pn $demo_mnt
    fi
}

bootloader_menu_config() {
    # Update uboot Environment
    prepare_boot_menu
    if [ "$install_env" = "onie" ]; then
        chmod -x /bin/onie-nos-mode
    else
        docker_cleanup
        ssh-keygen -A
    fi
}
